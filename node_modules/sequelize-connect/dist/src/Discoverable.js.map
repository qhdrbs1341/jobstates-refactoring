{"version":3,"sources":["../../src/Discoverable.js"],"names":["fs","Promise","promisifyAll","f","Discoverable","paths","matcher","logger","discovered","each","location","_dive","then","results","_log","filter","value","dir","readdirAsync","map","file","path","stat","statSync","isDirectory","test","level","message","log","module","exports"],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAIA,KAAKC,mBAAQC,YAAR,CAAqBC,YAArB,CAAT;;IAEMC,Y;AAEJ,wBAAYC,KAAZ,EAAmBC,OAAnB,EAAyC;AAAA,QAAbC,MAAa,uEAAN,KAAM;;AAAA;;AACvC,SAAKF,KAAL,GAAaA,KAAb;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AAED;;;;;;;;;;+BAMW;AAAA;;AAET,UAAIC,aAAa,EAAjB;;AAEA,aAAOP,mBAAQQ,IAAR,CAAa,KAAKJ,KAAlB,EAAyB,UAACK,QAAD,EAAc;;AAE5C;AACA,eAAO,MAAKC,KAAL,CAAWD,QAAX,EACJE,IADI,CACC,UAACC,OAAD,EAAa;AACjB,gBAAKC,IAAL,CAAU,OAAV,EAAmB,oBAAnB;AACA,iBAAO,sBAAQD,OAAR,EAAiB,IAAjB,CAAP;AACD,SAJI,EAKJE,MALI,CAKG,UAACC,KAAD,EAAW;AACjB,iBAAOA,UAAU,KAAjB;AACD,SAPI,EAQJJ,IARI,CAQC,UAACC,OAAD,EAAa;AACjB,gBAAKC,IAAL,CAAU,OAAV,EAAmB,6CAA6CD,OAAhE;AACA,iBAAOL,aAAaK,OAApB;AACD,SAXI,CAAP;AAaD,OAhBM,EAgBJD,IAhBI,CAgBC,YAAM;AACZ,eAAOJ,UAAP;AACD,OAlBM,CAAP;AAmBD;;AAED;;;;;;;;0BAKMS,G,EAAK;AAAA;;AAET;AACA,aAAOjB,GAAGkB,YAAH,CAAgBD,GAAhB,EAAqBE,GAArB,CAAyB,UAACC,IAAD,EAAU;AACxC,YAAIC,OAAOJ,MAAM,GAAN,GAAYG,IAAvB,CADwC,CACV;AAC9B,YAAIE,OAAOtB,GAAGuB,QAAH,CAAYF,IAAZ,CAAX,CAFwC,CAEV;;AAE9B;AACA,YAAIC,QAAQA,KAAKE,WAAL,EAAZ,EAAgC;AAC9B,iBAAO,OAAKb,KAAL,CAAWU,IAAX,CAAP,CAD8B,CACL;AAC1B,SAFD,MAEO;AACL;AACA,cAAG,OAAO,OAAKf,OAAZ,KAAwB,UAAxB,IAAsC,OAAKA,OAAL,CAAac,IAAb,MAAuB,IAAhE,EAAsE;AACpE,mBAAKN,IAAL,CAAU,OAAV,EAAmB,sBAAsBO,IAAzC;AACA,mBAAOA,IAAP;AACD,WAHD,MAGO,IAAG,uBAAuBI,IAAvB,CAA4BL,IAA5B,CAAH,EAAsC;AAC3C,mBAAKN,IAAL,CAAU,OAAV,EAAmB,sBAAsBO,IAAzC;AACA,mBAAOA,IAAP;AACD;;AAED,iBAAO,KAAP;AACD;AACF,OAnBM,CAAP;AAqBD;;AAED;;;;;;;;yBAKKK,K,EAAOC,O,EAAQ;AAClB,WAAKpB,MAAL,GAAc,KAAKA,MAAL,CAAYqB,GAAZ,CAAgBF,KAAhB,EAAuBC,OAAvB,CAAd,GAAgD,KAAhD;AACD;;;;;;AAGHE,OAAOC,OAAP,GAAkB1B,YAAlB","file":"Discoverable.js","sourcesContent":["import Promise from \"bluebird\";\nimport flatten from \"lodash.flatten\";\nimport f from \"fs\";\n\nlet fs = Promise.promisifyAll(f);\n\nclass Discoverable {\n\n  constructor(paths, matcher, logger=false){\n    this.paths = paths;\n    this.matcher = matcher;\n    this.logger = logger;\n  }\n\n  /**\n   * Discover the specified path for files\n   * matching the given convention\n   *\n   * @return {Array} The array of matching files for the discoverable directories\n   */\n  discover() {\n\n    let discovered = [];\n\n    return Promise.each(this.paths, (location) => {\n\n      // Recurse through the api directory and collect the models\n      return this._dive(location)\n        .then((results) => {\n          this._log(\"debug\", \"Flattening results\");\n          return flatten(results, true);\n        })\n        .filter((value) => {\n          return value !== false\n        })\n        .then((results) => {\n          this._log(\"debug\", \"Assigning filtered results to discover: \" + results);\n          return discovered = results;\n        });\n\n    }).then(() => {\n      return discovered;\n    });\n  }\n\n  /**\n   * [dive description]\n   * @param  {String} dir The directory to recurse through\n   * @return {Array}     An array of matching files at the given location\n   */\n  _dive(dir) {\n\n    // Read the directory\n    return fs.readdirAsync(dir).map((file) => {\n      let path = dir + \"/\" + file;  // Full path of that file\n      let stat = fs.statSync(path); // Get the file's stats\n\n      // If the file is a directory\n      if (stat && stat.isDirectory()) {\n        return this._dive(path); // Dive into the directory\n      } else {\n        // Allow user to define a custom matcher function\n        if(typeof this.matcher === 'function' && this.matcher(file) === true) {\n          this._log(\"debug\", \"Discovered path: \" + path);\n          return path;\n        } else if(/^[^.].*?\\.model\\.js$/.test(file)) {\n          this._log(\"debug\", \"Discovered path: \" + path);\n          return path;\n        }\n\n        return false;\n      }\n    });\n\n  }\n\n  /**\n   * Attempt to log\n   * @param  {String} message Message to log\n   * @return {null}\n   */\n  _log(level, message){\n    this.logger ? this.logger.log(level, message) : false;\n  }\n}\n\nmodule.exports =  Discoverable;\n"]}